services:
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: subscriptions
    ports:
      - "5432:5432"
    networks:
      - app-network
    volumes:
      - pgdata:/var/lib/postgresql/data

  pgadmin:
    image: dpage/pgadmin4:8.10
    container_name: pgadmin
    depends_on:
      - postgres
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "8081:80"
    networks:
      - app-network
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app-network
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka
    hostname: kafka
    depends_on:
      - zookeeper
    networks:
      - app-network
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_HOST://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_HOST
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
      - "9093:9093"
    volumes:
      - kafka-data:/var/lib/kafka/data
  
  debezium:
    image: quay.io/debezium/connect:2.7
    container_name: debezium
    depends_on:
      - kafka
      - postgres
    networks:
      - app-network
    environment:
      BOOTSTRAP_SERVERS: kafka:9093
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: debezium_connect_configs
      OFFSET_STORAGE_TOPIC: debezium_connect_offsets
      STATUS_STORAGE_TOPIC: debezium_connect_status
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      KEY_CONVERTER_SCHEMAS_ENABLE: "false"
    ports:
      - "8083:8083"

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    depends_on:
      - kafka
    networks:
      - app-network
    environment:
      KAFKA_BROKERCONNECT: kafka:9093
      JVM_OPTS: "-Xms32M -Xmx64M"
    ports:
      - "9000:9000"

  traefik:
    image: traefik:v3.1
    container_name: traefik
    command:
      - "--api.insecure=true"            # Habilita painel web (http://localhost:8080)
      - "--providers.docker=true"        # Descobre containers Docker
      - "--entrypoints.web.address=:80"  # Entrada padrão HTTP
      - "--log.level=DEBUG"              # Habilita logs do Traefik (DEBUG, INFO, WARN, ERROR)
      - "--log.format=json"              # Formato do log (json ou common)
      - "--accesslog=true"               # Habilita access log
      - "--accesslog.format=json"        # Formato do access log (json ou common)
    ports:
      - "8080:8080"  # Painel do Traefik
      - "80:80"      # Entrada para os serviços
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - app-network

  user-service:
    build:
      context: ./user-service
      dockerfile: src/main/docker/Dockerfile.jvm
    image: club/user-service
    container_name: user-service
    depends_on:
      - postgres
      - kafka
    labels:
      - "traefik.http.routers.user.rule=PathPrefix(`/users`)"
    environment:
      # Banco de Dados
      QUARKUS_DATASOURCE_DB_KIND: postgresql
      QUARKUS_DATASOURCE_USERNAME: user
      QUARKUS_DATASOURCE_PASSWORD: password
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/subscriptions
    
      # Kafka
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      
      # Configurações de porta
      QUARKUS_HTTP_PORT: 8080
    ports:
      - "8082:8080"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  pgdata:
  pgadmin_data:
  kafka-data:
  zookeeper-data:
  zookeeper-logs:
